diet-2.0

* Plug-in
	- add support for user-defined performance metrics at SeD-level,
	and allow users to specify priorities for metrics to control
	scheduling process at agents.

* LogService
	- DIET can now send enhanced log information including tracking 
	read and write operations in JuxMem and tracking user-defined plug-in
	scheduler details.

* JuxMem
	- JuxMem is a distributed memory system based on JXTA peer-to-peer 
	technologies.  DIET now how the ability to store and retrieve data 
	in JuxMem.  Experimental.

* Multi-MA
	- A second type of multi-MA has been integrated that is not based
	on JXTA.  Experimental.

* Bug corrections
	- file length limits are too small (bug #10 in bugzilla)
	- dmat_manips clients crash when useAsyncAPI = 0 in config file. 
	  option not needed, so removed from config files. 
	  (bug #11 in bugzilla)
	- when building in a separate directory make install fails due to 
	  dependency on src/libs/*.jar.  Dependency removed with not
	  compiling with JXTA options. (bug #12)
	- union type embedded in a struct in idl/common_types.idl can not
	  be compiled by java compiler.  structure re-arranged to correct
	  the problem (bug #13)
	- when user re-uses the same profile for multiple service 
	  declarations without calling free in between, MA crashes.
	  bug was introduced after release 1.1, and has been corrected for
	  release 2.0. (bug #14)

* Known bugs but not resolved
	- INOUT parameters are not changed in asynchronous mode (bug #9 in
	  bugzilla)

diet-1.1

* logService
	- add LogManager to DIET component (MAs, LAs and SeDs) to enable DIET
	to suscribe to LogService. ( use configure with  :
	--enable--logservice option)
	
* Data persistance
	- add data persistance with DTM in DIET, now SeDs can store DATA.
	
* DIET multi-MA with JXTA
	- a prototype of multi-MA based on JXTA. ( use configure with :
	--enable-JXTA-mode option)
	- it is only a prototype!

* change in config file
	- name of variables "endPointPort" and "endHostname" change with
	"dietPort" and "dietHostname".

* bugs correction
	- bugs in diet_wait_or() function (bug #3 in bugzilla)
	- detection of omniORB in darwin (bug #4 in bugzilla)
	- empty file for DATA_PERSISTANCE even if we don't use it (bug #6 in bugzilla)
	- option --repeat in dmat_manip/client.c example (bug #7 in bugzilla)
	- parsing file on 64 bit architectures (bug #8 in bugzilla)
	
* known bugs but not resolved
	- INOUT parameters are not changed in asynchronous mode ( bug #9 in
	bugzilla)
	- file length are too short (bug #10 in bugzilla)
	- dmat_manips clients crash when useAsyncAPI = 0 ( bug #11 in
	bugzilla)


diet (1.0 beta)  

* GNU autotools: automake and autoconf.
  - Apparition of this ChangeLog.
  - Ascendant compatibility with the old "manual" configure + all options for
    abling/disabling modules (doc, examples, examples/BLAS and
    examples/ScaLAPACK), for giving omniORB and FAST paths, installation, etc.
  - For maintainers, three other modules are available: stats, Cichlid (as in
    0.6.4), and multi-MA.

* Separation of LA and MA.
  Two different programs are now built: DIET_LA and DIET_MA. Of course the
  configuration file is modified (the first line is obsolete).

* Contract checking.
  The client asks the server for a re-estimation of the request just before it
  invokes the solve. But the data transfer does not begin at the same time yet.

* Communication structures.
  - The IDL types are reorganized to take into account the latest discussions
    about the algorithms to be implemented in DIET. There is no need of a
    decision type left (the client needs complete information of a response for
    contract checking).
  - The attributes of a server include NWS forecasts if FAST was not able to
    estimate the computation time, and a sequence of communication times (one
    for each argument, even OUT ones, when it is possible to guess their
    sizes).
  - The data loc are removed. Let us the data manager take care of that.
  
* Scheduling
  - Big purge in the agent ! It does not compute the persistent data transfer
    times (which is done at the SeD level by the data manager), but only the
    non-persstent ones, assuming the transfer time is approximately the one
    through all nodes of hierarchy downto the SeD.
  - The scheduling part of the agent is deported into various scheduling
    classes. The final goal is to easily switch from a scheduler to another, and
    make it depend on the request itself.
    The various scheduling classes are structured as follows:
     there are Schedulers, which can sort and aggregate servers that have similar
     features (such as the ones that got a FAST estimation, the ones that have
     only NWS forecasts, etc.),
     and there is a GlobalScheduler, which applies the schedulers in a given
     order for sorting or aggregating.
  - Some schedulers are defined (with their interface) in Schedulers.hh, and
    GlobalSchedulers are defined in GlobalSchedulers.hh. Their sort method is
    dead code so far (only aggregate is used, since all agents give their parent
    a sorted list of servers).

* CORBA part:
  - The ORBMgr is the only interface to the ORB.
  - New IDL files are added:
    Agent, MasterAgent and LocalAgent.idl for the LA/MA separation,
    but also registration_and_request, response.idl, since communication
    structures have been reorganized.
  - A check-contract mechanism is implemented to avoid crossed-request issues.

* Utils part:
  - Merge all traceLevels into one static variable in the module debug.
  - Add Parsers, a class that performs the parsing of configuration files.
  - Manage the string ID for data.

