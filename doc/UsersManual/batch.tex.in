%****************************************************************************%
%* DIET User's Manual Performance prediction chapter file                   *%
%*                                                                          *%
%*  Author(s):                                                              *%
%*    - Yves Caniou (yves.caniou@ens-lyon.fr)                               *%
%*                                                                          *%
%* $LICENSE$                                                                *%
%****************************************************************************%

\chapter{Batch and parallel submissions}
\label{chapter:parallelSubmission}
\section{Introduction}

Most of resources in a grid is a parallel one. Computationnal grids
are even considered as hierachical sets of parallel resources, as we
can see in ongoing project like the french research grid projet,
Grid'5000\cite{grid5000} (for the moment, 9 sites are involved), or
like the EGEE\footnote{\url{http://public.eu-egee.org/}} project ({\it
Enabling Grids for E-science in Europe}), composed of more than a
hundred centres in 31 countries. Then, in order to provide transparent
access to resources, grid middleware must supply mechanisms to submit
parallel jobs.

\section{Batch system management}

\subsection{Batch systems}

Generally, a parallel resource is managed by a batch system, and jobs
are submitted to a site queue. The batch system is responsible for
managing parallel jobs: to determine and allocate the resources needed
for the execution and to schedule each job.

Diagramme batch

\subsection{Compilation and configuration in \diet}

Compilation must necessary be done with \verb!cmake! (you can find
some information about cmake within \diet sources in
\verb!@CMAKE_SOURCE_DIR@/Cmake/README!) because it is not maintained
with the autotools anymore.

Batch submission mechanisms were first built using two libraries:
elagi\footnote{\url{http://grail.sdsc.edu/projects/elagi/}} and
appleseeds\footnote{\url{http://grail.sdsc.edu/projects/appleseeds/}},
developped in the University of California of San-Diego. It now only
relies on the appleseeds library, that can be downloaded at the
download section on the site.

You must enable the batch mechanism and provide the path of the
appleseeds installation in cmake arguments. Typically, if you build
\diet from the command line, you can use the following:

\begin{lstlisting}[language=bash,label=dietConfig.sh,basewidth={.5em,.4em},fontadjust]

   ccmake $diet_src_path                          \
          -DDIET_USE_BATCH:BOOL=ON                \
          -DAPPLESEEDS_DIR:PATH=$appleseeds_path

\end{lstlisting}

\subsection{Batch schedulers}

\subsection{Presentation of batch submission mechanisms}

pas de modif nec coté client

Diagramme appel sync et async

Prévenu avec au plus 30 secondes

\subsection{Client batch extended API}

Pas de réelles modif... QQs trucs en plus (\verb!set_diet_parallel!)..

\subsection{Server batch extended API and configuration file}

The programmer of a batch service available in a \sed has not to be
worried about which batch system to submit, hence, \diet provide all
the mechanisms to transparently submit the code to them. 

Nonetheless, there are too many diverse scenarii about the
communication and execution of a parallel application: the code can be
a MPI code or composed of different interacting programs possibly
launched via ssh on every nodes; input and output files can use NFS if
this filesystem is present, or they can be splitted and uploaded to
each node participating to the calculus.

Then, we will see how to further configure the server configuration
file, and how to write a submission script from within a \sed in the
following sections.

\subsubsection{Server configuration file}

%FIXME: à quel point parle t-on d'elagi ?
\diet is able to submit batch script to several batch schedulers,
among which: "condor", "dqs", "loadleveler", "lsf", "pbs", "sge" or
"oar".
% FIXME: do we give shell, condor which are not batch? Do we give all
% even if only oar is tested?
The name of the batch scheduler managing the parallel resource where
the \sed is deplayed has to be incorporated with the keyword
\verb!batchName! in the \verb!server.config!  to let the \sed know how
to submit a job correctly.

Furthermore, if there is no default queue, the \diet deployer must
also provide the queue on which jobs have to be submitted, with the
keyword \verb!batchQueue!.

For example, the \verb!server.config! file can contain the following
lines:

\begin{lstlisting}[language=bash,label=dietConfig.sh,basewidth={.5em,.4em},fontadjust]

batchName = oar
batchQueue = queue_9_13

\end{lstlisting}

\subsubsection{Server batch API}

\paragraph{\bf Server.}

A server is mostly built like described in
section~\ref{ch:server}. The function
\verb!diet_profile_desc_set_batch(diet_profile_desc_t* profile)! let
the \sed know that the service defined within the profile is treated
as a batch serice.

{\underline Note:} a \sed only launches batch services or none at
all.

\paragraph{\bf Service.}

The writing of a service corresponding to a batch job is very
simple. The \sed programmer builds a shell script in a string, which
is passed to the function
\verb!diet_submit_batch(diet_profile_t* pb, char* script)!. The shell
script must take care of data replication and executable invocation.

In order to be batch-independant, the \sed API provides some
meta-variable:

\begin{itemize}
\item \verb!$DIET_NAME_FRONTALE!: frontale name
\item \verb!$DIET_BATCH_NODESLIST!: list of reserved nodes
\item \verb!$DIET_BATCH_NBNODES!: number of reserved nodes
\item \verb!$DIET_BATCH_NODESFILE!: name of the file containing the
identity of the reserved nodes
\item \verb!$DIET_USER_NBPROCS!: number of processors
\end{itemize}

\subsection{Example of writing a helloMPI client/server}

There is an client/server example in\\
\verb!@CMAKE_SOURCE_DIR@/src/examples/Batch! directory. We reproduce
them here.

%\parbox[b]{.5\textwidth}{
{%\twocolumn
  \tiny
  \lstinputlisting[title={\bf Synchronous client code},language=c,label=client.c,basewidth={.5em,.4em},fontadjust]{@CMAKE_SOURCE_DIR@/src/examples/Batch/batch_client.c}
}

\newpage

{%\twocolumn
  \tiny
  \lstinputlisting[title={\bf Server code},language=c,label=client.c,basewidth={.5em,.4em},fontadjust]{@CMAKE_SOURCE_DIR@/src/examples/Batch/batch_server.c}
}

%\onecolumn

\section{Parallel systems}

Ongoing work.