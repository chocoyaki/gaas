/**
 * @file Agent.idl
 *
 * @brief  DIET agent IDL description
 *
 * @author Philippe COMBES (Philippe.Combes@ens-lyon.fr)
 *         Sylvain DAHAN (Sylvain.Dahan@lifc.univ-fcomte.fr)
 *         Frederic LOMBARD (Frederic.Lombard@lifc.univ-fcomte.fr)
 *
 * @section Licence
 *   |LICENCE|
 */


#ifndef _AGENT_IDL_
#define _AGENT_IDL_

#include "common_types.idl"
#include "response.idl"

/****************************************************************************/
/* Agent interface                                                          */
/****************************************************************************/

interface Agent {

  /**
   * Invoked by other agents to register as a child of this agent. As it is
   * useless to register without offering services, the last argument is the
   * same as for addServices method. Returns a registration number wich
   * indentifies the child amongst the other children of this agent.
   */
  long agentSubscribe(in string agentName, in string hostname,
			       in SeqCorbaProfileDesc_t services);
  /**
   * Invoked by servers to register as a child of this agent. As it is useless
   * to register without offering services, the last argument is the same as for
   * addServices method. Returns a registration number wich indentifies the
   * child amongst the other children of this agent.
   */
  long serverSubscribe(in string seDName,
                       in string hostname,
                       in SeqCorbaProfileDesc_t services);

  /** Sends a request to the agent to commit suicide.
   * If "recursive" is true, then the agent forwards the request
   * to its children.
   */
  long removeElement(in boolean recursive);

  /**
   * Invoked by servers or LA to unregister as a child from this agent.
   * This also unregister the services offered by the child in the
   * service table of the agent.
   */
  long childUnsubscribe(in unsigned long childID,
			in SeqCorbaProfileDesc_t services);

  /**
   * Invoked by SeDImpl::removeService(...) after removing a service
   * locally on a SeD. Used to inform the rest of the hierarchy that this
   * service is no longer available on this SeD.
   */
  long childRemoveService(in unsigned long childID,
			  in corba_profile_desc_t profile);

  /**
   * Service table update method. Propagate the update of the problem list up
   * the tree when a new child registers. The first parameter is the child's
   * registration number.
   */
  long addServices(in unsigned long myID,
                   in SeqCorbaProfileDesc_t services);


  /**
   * Message posting functions:
   * This call is asynchronous. The response message REQ is kept in an
   * internal list and processed as soon as possible.
   */
  oneway void getResponse(in corba_response_t resp);


  /** Used to test if this agent is alive. */
  long ping();

  /** Used to get the host name of the Agent */
  string getHostname() ;
  string getDataManager();
  SeqString searchData(in string request);
};


#endif // _AGENT_IDL_

