/**
 * @file MasterAgentFwdr.idl
 *
 * @brief  DIET forwarder IDL description    
 *
 * @author  Gael Le Mahec   (gael.le.mahec@ens-lyon.fr)
 *
 * @section Licence
 *   |LICENCE|
 */



#ifndef MASTERAGENTFWDR_IDL
#define MASTERAGENTFWDR_IDL

#include "MasterAgent.idl"
#include "AgentFwdr.idl"

interface MasterAgentFwdr : MasterAgent {

};

interface MasterAgentForwarder : AgentForwarder {
  corba_response_t submit(in corba_pb_desc_t pb_profile,
                          in unsigned long maxServers,
                          in string objName)
    raises(UnknownObject);

  long get_session_num(in string objName)
    raises(UnknownObject);

  string get_data_id(in string objName)
    raises(UnknownObject);

  unsigned long dataLookUp(in string id,
                           in string objName)
    raises(UnknownObject);

  corba_data_desc_t get_data_arg(in string argID,
                                 in string objName)
    raises(Dagda::DataNotFound, UnknownObject);

  long diet_free_pdata(in string argID, in string objName)
    raises(UnknownObject);

  SeqCorbaProfileDesc_t getProfiles(out long length,
                                    in string objName)
    raises(UnknownObject);

#ifdef HAVE_MULTI_MA
  boolean handShake(in string masterAgentName, in string myName,
                    in string objName)
    raises(UnknownObject);

  string getBindName(in string objName)
    raises(UnknownObject);

  oneway void searchService(in string masterAgentName,
			    in string myName,
			    in corba_request_t request,
                            in string objName);

  oneway void stopFlooding(in long reqId, in string senderId,
                           in string objName);

  oneway void serviceNotFound(in long reqId, in string senderId,
                              in string objName);

  oneway void newFlood(in long reqId, in string senderId,
                       in string objName);

  oneway void floodedArea(in long reqId, in string senderId,
                          in string objName);

  oneway void alreadyContacted(in long reqId,
                               in string senderId,
                               in string objName);

  oneway void serviceFound(in long reqId, in corba_response_t decision,
                           in string objName);

#endif // HAVE_MULTI_MA

#ifdef HAVE_WORKFLOW
  wf_response_t submit_pb_set (in corba_pb_desc_seq_t seq_pb,
                               in string objName)
    raises(UnknownObject);

  response_seq_t
  submit_pb_seq(in corba_pb_desc_seq_t pb_seq,
                in long reqCount,
                out boolean complete,
                out long firstReqId,
                out long seqReqId,
                in string objName)
    raises(UnknownObject);
#endif // HAVE_WORKFLOW

  SeqString searchData(in string request,
                       in string objName)
    raises(UnknownObject);
  long insertData(in string key, in SeqString values,
                  in string objName)
    raises(UnknownObject);
};


#endif
