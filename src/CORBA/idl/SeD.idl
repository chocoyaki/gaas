/**
 * @file SeD.idl
 *
 * @brief  DIET SeD IDL description    
 *
 * @author  Philippe COMBES (Philippe.Combes@ens-lyon.fr)
 *          Frederic LOMBARD (Frederic.Lombard@lifc.univ-fcomte.fr)
 *
 * @section Licence
 *   |LICENCE|
 */


#ifndef _SED_IDL_
#define _SED_IDL_

#include "common_types.idl"

interface SeD {

  /** Let check if this server is alive. */
  long ping();

  /** Send an order for the SeD to connect to a new parent */
  long bindParent(in string parentName);
  /** Send an order for the SeD to disconnect from its parent */
  long disconnect();
  /** Send an order for the SeD to kill itself */
  long removeElement();

  /** Message posting function: the request is proceeded immediately. */
  oneway void getRequest(in corba_request_t req);

  /**
   * Re-evaluate the total computation time and commnunication
   * for persistent data (since it is not possible to re-evaluate
   * the communication time between the client and the server).
   * Return non NULL if it was impossible to evaluate.
   */
  long checkContract(inout corba_estimation_t estimation,
		     in corba_pb_desc_t pb);

 /** update TIME_SINCE_LAST_SOLVE before client sends data */
  void updateTimeSinceLastSolve() ;

  /** Solve function: all arguments are inout for "const" reasons. */
  long solve(in string path, inout corba_profile_t pb);

  /*--------------------------------------------------------------*/
  /* asyncSolve function:                                         */
  /*   all arguments are in for asynchronous reasons              */
  /*   We can use persistent IOR rather callback ref in futur which */
  /*   will allow fault tolerance on if client dies               */
  /*--------------------------------------------------------------*/

  oneway void solveAsync(in string path, in corba_profile_t pb,
                      in string volatileclientPtr);

// modif bisnard_logs_1
  /** get the DataMgr ID **/
  string getDataMgrID();
// end modif bisnard_logs_1


  /**
   * get the list of available profiles.
   */
  SeqCorbaProfileDesc_t getSeDProfiles(out long length);

};


#endif // _SED_IDL_
