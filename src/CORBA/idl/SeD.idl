/****************************************************************************/
/* DIET SeD IDL description                                                 */
/*                                                                          */
/*  Author(s):                                                              */
/*    - Philippe COMBES (Philippe.Combes@ens-lyon.fr)                       */
/*    - Frederic LOMBARD (Frederic.Lombard@lifc.univ-fcomte.fr)             */
/*                                                                          */
/* $LICENSE$                                                                */
/****************************************************************************/
/* $Id$
 * $Log$
 * Revision 1.14  2004/07/29 18:52:11  rbolze
 * Change solve function now , DIET_client send the reqID of the request when
 * he call the solve function.
 * Nothing is change for DIET's API
 *
 * Revision 1.13  2003/06/02 15:29:46  cpera
 * Update callback use.
 *
 * Revision 1.12  2003/06/02 08:08:11  cpera
 * Beta version of asynchronize DIET API.
 *
 * Revision 1.11  2003/04/10 12:21:23  pcombes
 * Add checkContract method.
 *
 * Revision 1.10  2002/12/03 19:08:23  pcombes
 * Update configure, update to FAST 0.3.15, clean CVS logs in files.
 * Put main Makefile in root directory.
 *
 * Revision 1.8  2002/10/03 17:58:14  pcombes
 * Add trace levels (for Bert): traceLevel = n can be added in cfg files.
 * An agent son can now be killed (^C) without crashing this agent.
 * DIET with FAST: compilation is OK, but run time is still to be fixed.
 *
 * Revision 1.7  2002/09/17 15:23:12  pcombes
 * Bug fixes on inout arguments and examples
 * Add support for omniORB 4.0.0
 *
 * Revision 1.6  2002/08/30 16:50:13  pcombes
 * This version works as well as the alpha version from the user point of view,
 * but the API is now the one imposed by the latest specifications (GridRPC API
 * in its sequential part, config file for all parts of the platform, agent
 * algorithm, etc.)
 *  - Reduce marshalling by using CORBA types internally
 *  - Creation of a class ServiceTable that is to be replaced
 *    by an LDAP DB for the MA
 *  - No copy for client/SeD data transfers
 *  - ...
 ****************************************************************************/


#ifndef _SED_IDL_
#define _SED_IDL_

#include "common_types.idl"

interface SeD {

  /** Let check if this server is alive. */
  long ping();

  /** Message posting function: the request is proceeded immediately. */
  oneway void getRequest(in corba_request_t req);

  /**
   * Re-evaluate the total computation time and commnunication
   * for persistent data (since it is not possible to re-evaluate
   * the communication time between the client and the server).
   * Return non NULL if it was impossible to evaluate.
   */
  long checkContract(inout corba_estimation_t estimation,
		     in corba_pb_desc_t pb);

  /** Solve function: all arguments are inout for "const" reasons. */
  long solve(in string path, inout corba_profile_t pb,in long reqID);
  
  /*--------------------------------------------------------------*/
  /* asyncSolve function:                                         */
  /*   all arguments are in for asynchronous reasons              */
  /*   We can use persistent IOR rather callback ref in futur which */
  /*   will allow fault tolerance on if client dies               */
  /*--------------------------------------------------------------*/

  oneway void solveAsync(in string path, in corba_profile_t pb,
                      in long reqID, in string volatileclientPtr);
};


#endif // _SED_IDL_
