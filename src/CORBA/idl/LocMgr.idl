/****************************************************************************/
/* DIET Data Location Manager IDL description                               */
/*                                                                          */
/*  Author(s):                                                              */
/*    - Bruno DEL FABBRO (Bruno.DelFabbro@lifc.univ-fcomte.fr)              */
/*                                                                          */
/* $LICENSE$                                                                */
/****************************************************************************/
/* $Id$
 * $Log$
 * Revision 1.8  2010/07/12 15:54:11  glemahec
 * DIET 2.5 beta 1 - Forwarder IDL files
 *
 * Revision 1.7  2007/07/13 16:44:40  ecaron
 * Remove deprecated code (ALTPREDICT part)
 *
 * Revision 1.6  2005/09/05 15:59:20  hdail
 * - Moved subtree search of whereData into whereDataSubtree so whereDataSubtree
 *   can be used on its own when desired.
 *
 * Revision 1.5  2004/02/27 10:19:50  bdelfabr
 * description of all methods for data persistency
 *
 * Revision 1.4  2003/11/10 14:01:25  bdelfabr
 * method invoked by DM to find a SeD that hold a data (for data transfer estimation time)
 *
 * Revision 1.3  2003/10/14 20:26:27  bdelfabr
 * adding methods for printing List of sons name
 *
 * Revision 1.2  2003/09/24 09:08:42  pcombes
 * DataMgr does not need a name: use its reference.
 *
 * Revision 1.1  2003/09/22 21:07:01  pcombes
 * Set all the modules and their interfaces for data persistency.
 *
 ***************************************************************************/

#ifndef _LOCMGR_IDL_
#define _LOCMGR_IDL_

#include "DataMgr.idl"

/****************************************************************************/
/* Loc Manager Interface                                                    */
/****************************************************************************/

interface LocMgr {

  /**
   * Invoked by other loc Managers to register as a child of this Loc Manager. 
   * Returns a registration number which
   * indentifies the child amongst the other children of this Loc Manager.
   */
  unsigned long locMgrSubscribe(in string me, in string hostName);

  /**
   * Invoked by other data Managers to register as a child of this Loc Manager. 
   * Returns a registration number which
   * indentifies the child amongst the other children of this Loc Manager.
   */
  unsigned long dataMgrSubscribe(in string me, in string hostName);

  /**
   * Add data Reference method. The first argument is the id of the data
   * registered, the second argument is the registration number of the son
   * holding it.
   */
  void addDataRef(in corba_data_desc_t arg, in unsigned long cChildID);

  /**
   * Remove data Reference method. The first argument is the data id to remove,
   * the second argument is the registration number of the son holding it
   */  
  void rmDataRefLocMgr(in string argID, in unsigned long cChildID);

  /**
   * Update data Reference method. The first argument is the id of the data
   * which was updated (i.e. was moved) the second argument is the registration
   * number of the new son holding the data the last argument is set to 0 if up
   * and 1 if down (up to add the new reference, down to remove it)
   */
  oneway void updateDataRef(in corba_data_desc_t arg,
			    in unsigned long cChildID, in long upDown);

  /**
   * Looking for data Reference method. The argument is the id of the IN or
   * INOUT data which are searched. Returns the reference the Data Manager
   * holding the data, or DataMgr::_nil() if not found.
   */
  string whereData(in string argID);

  /**
   * Same functionality and interface as whereData, but only searches in 
   * subtree rooted at this LocMgr.
   */
  string whereDataSubtree(in string argID);

  /** 
   * Change property of data (as their occupation flag for example).
   * NB : method not used so far
   */
  void updateDataProp(in string argID);


  /**
   * - removes data identified by argID from LocList
   * - propagates the change to a child
   */
  long rm_pdata(in string argID);

  /** used in prinList*/
  string setMyName();
 
  /** print list of data references stored */
  void printList();
 
  /** method called by dataManager to get the IOR of the DM 
      that hold the data identified by id
  */
  string whichSeDOwner(in string argID);

};


#endif //_LOCMGR_IDL_
