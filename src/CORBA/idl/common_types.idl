/**
 * @file common_types.idl
 *
 * @brief  DIET IDL types for SeD registration and client request (init steps) 
 *
 * @author Philippe COMBES (Philippe.Combes@ens-lyon.fr)
 *         Frederic LOMBARD (Frederic.Lombard@lifc.univ-fcomte.fr)
 *
 * @section Licence
 *   |LICENSE|
 */


#ifndef _COMMON_TYPES_IDL_
#define _COMMON_TYPES_IDL_

typedef sequence<any>    SeqAny;
typedef sequence<double> SeqDouble;
typedef sequence<long>   SeqLong;
typedef sequence<char>   SeqChar;
typedef sequence<string> SeqString;
typedef sequence<octet>  SeqOctet;

/* The object name is not valid. */
exception BadNameException {
	string name;
	string function;
	string forwarder_name;
};
/* The name does not refer to a registered object. */
exception UnknownObject {
	string name;
};

/****************************************************************************/
/* DATA PERISTENCY: Data Description for Data Manager                       */
/****************************************************************************/

/** State of the data */
enum occupationFlag {DIET_FREE, DIET_INUSE, DIET_TRANSFERT};
/**
 * Flag used to manage data coherence: data only registered on one Data Manager
 */
enum kleenexFlag {DIET_ORIGINAL, DIET_KLEENEXCOPY};

/** Structure of the Data Identifier */
struct corba_data_id_t {
  string idNumber;
  kleenexFlag dataCopy;
  occupationFlag state;
};


/****************************************************************************/
/* REGISTRATON _ Data description                                           */
/* Mapping for the diet_data_desc_t type                                    */
/****************************************************************************/

/** Simple complex mapping */
struct corba_scomplex_t {
  float r;
  float i;
};
/** Double complex mapping */
struct corba_dcomplex_t {
  double r;
  double i;
};

/** Mapping for struct diet_scalar_specific */
struct corba_scalar_specific_t {
  any value;
};

/** Mapping for struct diet_vector_specific */
struct corba_vector_specific_t {
  unsigned long long size;
};

/** Mapping fo structr diet_matrix_specific */
struct corba_matrix_specific_t {
  unsigned long long nb_r;
  unsigned long long nb_c;
  unsigned long order;
};

/** Mapping for struct diet_string_specific */
struct corba_string_specific_t {
  unsigned long length;
};

/** Mapping for struct diet_paramstring_specific */
struct corba_paramstring_specific_t {
  unsigned long length;
  string param;
};

/** Mapping for struct diet_file_specific */
struct corba_file_specific_t {
  unsigned long long size;
  string path;
};

/** Mapping for struct diet_container_specific */
struct corba_container_specific_t {
  unsigned long long size;
};

/**
 * Descriptor
 * The field 'type' in diet_data_desc_t is the discriminant of union field
 */
union type switch (long) {
 case 0:
   corba_scalar_specific_t scal;
 case 1:
   corba_vector_specific_t vect;
 case 2:
   corba_matrix_specific_t mat;
 case 3:
   corba_string_specific_t str;
 case 4:
   corba_paramstring_specific_t pstr;
 case 5:
   corba_file_specific_t   file;
 case 6:
   corba_container_specific_t   cont;
};

struct corba_data_desc_t {
  corba_data_id_t id;
  long mode;
  long base_type;
  type specific;
  string dataManager; // This data Dagda data manager name.
  short byte_order;
  short base_type_size;
};
typedef sequence<corba_data_desc_t> SeqCorbaDataDesc_t;


/****************************************************************************/
/* REGISTRATON _ Service description                                        */
/****************************************************************************/

/** Argument descriptor */
struct corba_arg_desc_t {
  long base_type;
  long type;
};

/*
** server estimate aggregation
*/
struct corba_agg_default_t {
  octet dummy;
};
struct corba_agg_priority_t {
  sequence<long> priorityList;
};
/** New : The aggregator for user scheduler support.      */
/** The same as the default aggregator. Maybe not needed. */
#ifdef USERSCHED
struct corba_agg_user_t {
  octet dummy;
};
#endif
/**********************************************************/
union corba_agg_specific_t switch (long) {
 case 0:
   corba_agg_default_t agg_default;
 case 1:
   corba_agg_priority_t agg_priority;
/** New : The aggregator for user scheduler support. */
#ifdef USERSCHED
 case 2:
   corba_agg_user_t agg_user;
#endif
/*****************************************************/
};
struct corba_aggregator_desc_t {
  corba_agg_specific_t agg_specific;
};

/** Service profile descriptor (mapping for diet_profile_desc_t) */
struct corba_profile_desc_t {
  string path;
  long   last_in;
  long   last_inout;
  long   last_out;
  sequence<corba_arg_desc_t> param_desc;
#if HAVE_ALT_BATCH
  long parallel_flag ;
#endif
  corba_aggregator_desc_t aggregator;
};
typedef sequence<corba_profile_desc_t> SeqCorbaProfileDesc_t;



/****************************************************************************/
/* REQUEST _ Problem profile description                                    */
/****************************************************************************/

/** Mapping for diet_data_t */
struct corba_data_t {
  corba_data_desc_t desc;
  SeqChar value;
};
typedef sequence<corba_data_t> SeqCorbaData_t;

/**
 * Actually, this is an equivalent to a diet_profile_t without the data.
 */
struct corba_pb_desc_t {
  string path;
  long   last_in;
  long   last_inout;
  long   last_out;
  SeqCorbaDataDesc_t param_desc;
#if HAVE_ALT_BATCH
  long   parallel_flag ;
  long   nbprocs ;
  long   nbprocess ;
  long   walltime ;
#endif
};

/****************************************************************************/
/* REQUEST                                                                  */
/****************************************************************************/
/**
 * A request is associated to an ID, a problem description, and a scheduler.
 */
struct corba_request_t {
  unsigned long     reqID;
  corba_pb_desc_t   pb;
  string            serialized_scheduler;
  long              max_srv;
};


/****************************************************************************/
/* ESTIMATION                                                               */
/****************************************************************************/
/**
 * Custom estimation tags: space of a char, acceptable values
 * defined DIET_data_internal.h
 */
typedef short corba_est_tag_storage_t;

enum est_data_type {scalar, str, bin};
union est_data switch(est_data_type) {
 case scalar:
   double d;
 case str:
   string s;
 case bin:
   SeqOctet b;
};

/**
 * Custom estimation value
 */
struct corba_est_value_t {
  corba_est_tag_storage_t v_tag;
  short                   v_idx;
  est_data                v_value;
};
typedef sequence <corba_est_value_t> SeqEstValue_t;

/**
 * The estimation structure
 * commTimes == Communication times of ALL parameters :
 * the tranfer time of OUT parameters is estimated as if they were IN,
 * which is better than not taking them into account.
 *
 * totalTime stores all communication times + tComp
 */
struct corba_estimation_t {
  /* dynamic storage for performance estimation values */
  SeqEstValue_t estValues;
};

#ifdef HAVE_WORKFLOW
/** The workflow description structure. */
struct corba_wf_desc_t {
  string abstract_wf;
};
#endif

/****************************************************************************/
/* PROFILE (for problem solve)                                              */
/****************************************************************************/

/** The complete problem, sent from client to server. */
struct corba_profile_t {
  long   last_in;
  long   last_inout;
  long   last_out;
  SeqCorbaData_t parameters;
  unsigned long dietReqID ;
  corba_estimation_t estim;
#if HAVE_ALT_BATCH
  long   parallel_flag ;
  long   nbprocs ;
  long   nbprocess ;
  long   walltime ;
#endif
  string clientName;
};

#endif // _COMMON_TYPES_IDL_

