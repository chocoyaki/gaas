
This is a text help for DIET installation, extracted from the User's Manual. At
the end of this help, you will find the generic help provided by the Free
Software Fundation, concerning all software which, as DIET does, use the
autotools and their configure scripts.


                                 Dependencies

Hardware dependencies

   DIET has only been tested on Linux i386 and i686 platforms.
   Solaris - sparc, Linux - sparc and Linux - alpha will soon be
   supported.

Software dependencies

   The three parts of DIET (the client, the agent, and the SeD) can be used
   separately, and their dependencies are different from each other.

   DIET has been compiled successfully with various gcc versions between 3 and
   3.3 and no known problems exist for versions in that range.  Known problems
   exist compiling DIET with gcc 2.96 and gcc 3.4.

   When compiling DIET from the CVS, it is necessary to run bootstrap.sh 
   before configuring.  In this case, you will need libtool >= 1.4.2, 
   autoconf >= 2.59, and automake.

   CORBA is used for all communications inside the platform so all three
   parts of DIET depend on CORBA. The implementation of CORBA currently
   supported in DIET is:
     * omniORB 4 which depends on Python 1.5.2 or later.  We regularly
       use omniORB versions 4.0.3 and 4.0.5.

   In order to deploy CORBA services with omniORB, a configuration file and a
   log directory are required.  Their paths can be given to omniORB through
   environments variables, and/or at compile time with the
   -with-omniORB-config and -with-omniNames-logdir options.

   NB: We have noticed that some problems occur with Python 2.3: the
   generated C++ code could not be compiled. It has been patched in DIET,
   but some warnings still appear.

   The server parts of DIET can depend on FAST for the gathering of 
   performance data.  See http://graal.ens-lyon.fr/~mquinson/fast.html for 
   more information on FAST and its dependencies.
   
   Finally, some examples provided in the DIET sources depend on the BLAS
   libraries. However, all examples do not have to be compiled.


                            Compiling the platform

   Once all the dependencies you need are installed, untar the DIET
   archive and change to its root directory. A configure script will
   prepare DIET for compiling: its main options are described below, but
   please, run configure -help to get an up-to-date and complete usage
   description.

~ > tar xzf DIET.tgz
~ > cd DIET
~/DIET > ./configure --help=short
Configuration of DIET:
...

Optional features for configuration

  --enable-doc            enable the module doc, documentation about DIET

   This option activates the compilation and installation of the DIET
   documents, which is disabled by default, because it is very sensitive
   to the version of your LATEX compiler. The output postscript files are
   provided in the archive.

  --disable-examples      disable the module examples, basic DIET examples

   This option deactivates the compilation of the DIET examples, which is
   enabled by default.

  --enable-BLAS           enable the module BLAS, an example for calling BLAS
                          functions through DIET

   This option activates the compilation of the DIET BLAS examples, as a
   sub-module of examples (which means that this option has no effect if
   examples are disabled) - disabled by default.

 --enable-ScaLAPACK      enable the module ScaLAPACK, an example for calling
                          ScaLAPACK functions through DIET

   This option activates the compilation of the DIET examples, as a
   sub-module of examples (which means that this option has no effect if
   examples are disabled) - disabled by default.

Optional packages for configuration

  The -with-PKG-extra option

   For all packages that DIET depends on, the configure script provides
   an option that let the user define the arguments needed to compile
   with the libraries of the package PKG: -with-PKG-extra. This is useful
   when the configure script does not succeed on its own to get necessary
   compilation option.

   Let us take the example of a user who wishes to compile the BLAS
   examples (see the BLAS subsection below). On the platform he/she uses,
   it is necessary to specify the following arguments to compile with the
   BLAS library:

   -lm -L/home/theuser/lib -lblas -lg2c -lm

   Let us assume that specifying the option
   -with-BLAS-libraries=/home/theuser/lib is not enough for the configure
   script to compile DIET examples. Then, the user will have to add the
   following arguments to his/her configure command line:

   -with-BLAS-extra="-lm -L/home/theuser/lib -lblas -lg2c -lm"

  omniORB

  --with-omniORB=DIR      specify the root installation directory of omniORB
  --with-omniORB-includes=DIR
                          specify exact headers directory for omniORB
  --with-omniORB-libraries=DIR
                          specify exact libraries directory for omniORB
  --with-omniORB-extra=ARG|"ARG1 ARG2 ..."
                          specify extra args for the linker to find the
                          omniORB libraries (use "" in case of several args)

   This group of options lets the user define all necessary paths to
   compile with omniORB. Generally, -with-omniORB= would be enough, and
   the other options are provided for ugly installations of omniORB.
   NB: having the executable omniidl in the PATH environment variable
   should be enough in most cases.

  FAST

  --with-FAST=DIR         installation root directory for FAST (optional)
  --with-FAST-bin=DIR     installation directory for fast-config (optional)

   This group of options lets the user define all necessary paths to
   compile with FAST. Generally, -with-FAST= would be enough, and the
   other options are provided for ugly installations of FAST. There is no
   need to specify includes, libraries nor extra arguments, since FAST
   provides a tool fast-config that does the job for us.
   NB1: having the executable fast-config in the PATH environment
   variable should be enough in most cases.
   NB2: it is possible to specify -without-FAST, which overrides
   fast-config detection.

  BLAS

  --with-BLAS=DIR         specify the root installation directory of BLAS
  --with-BLAS-includes=DIR
                          specify exact headers directory for BLAS
  --with-BLAS-libraries=DIR
                          specify exact libraries directory for BLAS
  --with-BLAS-extra=ARG|"ARG1 ARG2 ..."
                          specify extra args for the linker to find the BLAS
                          libraries (use "" in case of several args)

   This group of options lets the user define all necessary paths to
   compile with the BLAS libraries. Generally, -with-BLAS= would be
   enough, and the other options are provided for ugly installation of
   the BLAS.
   NB: these options have no effect if the module example and/or its
   sub-module BLAS are disabled.

  .

  --with-ScaLAPACK=DIR    specify the root installation directory of ScaLAPACK
  --with-ScaLAPACK-includes=DIR
                          specify exact headers directory for ScaLAPACK
  --with-ScaLAPACK-libraries=DIR
                          specify exact libraries directory for ScaLAPACK
  --with-ScaLAPACK-extra=ARG|"ARG1 ARG2 ..."
                          specify extra args for the linker to find the
                          ScaLAPACK libraries (use "" in case of several args)

   This group of options lets the user define all necessary paths to
   compile with the libraries. Normally, -with-ScaLAPACK= should be
   enough, but the other options are provided because the installation of
   the libraries is often ugly, and thus difficult to detect
   automatically: for instance, the -with-ScaLAPACK-extra option is
   useful to integrate BLACS and MPI libraries, which are useful for
   ScaLAPACK.
   NB: these options has no effect if the module example and/or its
   sub-module are disabled.

From the configuration to the compilation

   A default option for configure scripts is -prefix=, which specifies
   where binary files, documents and configuration files will be
   installed. It is important to set this option: it defaults to
   DIET/install.

   The configuration will return with an error if no ORB was found. So
   please help the configure script to find the ORB with the
   -with-omniORB* options.

   If everything went OK, the configuration ends with a summary of the
   options that were selected and what it was possible to get. The output
   will look like:
CONFIGURE successfully ended !!!
DIET configured with prefix: ...
DIET configured without FAST.
DIET configured with omniORB 4 in ...

Please, run make help to get compilation instructions.
~/DIET > make help
====================================================================
Usage :   make help     : shows this help screen
          make agent    : builds DIET agent executable
          make SeD      : builds DIET SeD library
          make client   : builds DIET client library
          make examples : builds basic examples
          make install  : copy files into ./install
          make all      : builds everything but the examples
====================================================================

   This lets the user choose the DIET parts he/she wants to compile and
   install. It is recommended for beginners to compile the client, the
   SeD and the agent in one single step with make all. But please, pay
   attention to the fact that make all does not install DIET in the
   prefix provided at configuration time. To do this, run make install.

   make install will run the compilation for all DIET entities before the
   installation itself. Thus, if the user wants to compile only the
   agent, for instance, and install it, he must run:
~/DIET > cd src/agent
~DIET/src/agent > make install




                            Compiling the examples

   Four series of examples are provided in the DIET archive:
     * file_transfer: the server computes the sizes of two input files
       and returns them (with or without, randomly, the first file) as
       output arguments to the client.
     * dmat_manips: the server offers matrix manipulation routines:
       transposition (T), product (MatPROD) and sum (MatSUM, SqMatSUM for
       square matrices, and SqMatSUM_opt for square matrices but re-using
       the memory space of the second operand for the result) Any subset
       of these operations can be specified on the command line. The last
       two of them are given for compatibility with a BLAS server - see
       below
     * BLAS: the server is designed to offer all BLAS (Basic Linear
       Algebric Subroutines) functions but only manages the dgemm_
       function so far. Since this function computes $C = \alpha AB +
       \beta C$ , it can also compute a matrix-matrix product, a sum of
       square matrices, etc. All these services are offered by the BLAS
       server. Two clients are designed to use these services: one
       (dgemm_client.c) is designed to use the dgemm_ function only, and
       the other one (client.c) to use all BLAS functions (but currently
       only dgemm_) and sub-services, such as MatPROD.
     * : the server is designed to offer all (parallel version of the
       LAPACK library) functions but manages only the pdgemm_ function so
       far. The pdgemm_ is actually the parallel version of the dgemm_
       function, so that the server also offers all the same
       sub-services. Two clients are designed to use these services: one
       (pdgemm_client.c) is designed to use the pdgemm_ function only,
       and the other one (client.c) to use all functions and
       sub-services, such as MatPROD.

   Running make install in the examples directory (or in the root
   directory, when DIET is configured with -enable-examples) does not
   copy binary files into $<$ install_dir $>$ /bin, but in examples/bin:
   this odd behaviour is due to some limitations of the automake tool.

   Likewise, the samples of configuration files located in examples/cfgs
   are processed by make install to create ready-to-use configuration
   files in examples/etc, and then copied into $<$ install_dir $>$ /etc.
   Successive calls to make install will not erase the configuration
   files created and copied at first time, except if make uninstall is
   called inbetween ; thus the user will not lose his/her changes to
   these files.


     _________________________________________________________________

   Philippe Combes 2003-05-26


                    --------------------------------------
                   | FSF documentation about installation |
                    --------------------------------------

Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, and a
file `config.log' containing compiler output (useful mainly for
debugging `configure').

   It can also use an optional file (typically called `config.cache'
and enabled with `--cache-file=config.cache' or simply `-C') that saves
the results of its tests to speed up reconfiguring.  (Caching is
disabled by default to prevent problems with accidental use of stale
cache files.)

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If you are using the cache, and at
some point `config.cache' contains results you don't want to keep, you
may remove or edit it.

   The file `configure.ac' (or `configure.in') is used to create
`configure' by a program called `autoconf'.  You only need
`configure.ac' if you want to change it or regenerate `configure' using
a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  Run `./configure --help'
for details on some of the pertinent environment variables.

   You can give `configure' initial values for configuration parameters
by setting variables in the command line or in the environment.  Here
is an example:

     ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix

   *Note Defining Variables::, for more details.

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not support the `VPATH'
variable, you have to compile the package for one architecture at a
time in the source code directory.  After you have installed the
package for one architecture, use `make distclean' before reconfiguring
for another architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' cannot figure out
automatically, but needs to determine by the type of machine the package
will run on.  Usually, assuming the package is built to be run on the
_same_ architectures, `configure' can figure that out, but if it prints
a message saying it cannot guess the machine type, give it the
`--build=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name which has the form:

     CPU-COMPANY-SYSTEM

where SYSTEM can have one of these forms:

     OS KERNEL-OS

   See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the machine type.

   If you are _building_ compiler tools for cross-compiling, you should
use the `--target=TYPE' option to select the type of system they will
produce code for.

   If you want to _use_ a cross compiler, that generates code for a
platform different from the build platform, you should specify the
"host" platform (i.e., that on which the generated programs will
eventually be run) with `--host=TYPE'.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Defining Variables
==================

   Variables not defined in a site shell script can be set in the
environment passed to `configure'.  However, some packages may run
configure again during the build, and the customized values of these
variables may be lost.  In order to avoid this problem, you should set
them in the `configure' command line, using `VAR=value'.  For example:

     ./configure CC=/usr/local2/bin/gcc

will cause the specified gcc to be used as the C compiler (unless it is
overridden in the site shell script).

`configure' Invocation
======================

   `configure' recognizes the following options to control how it
operates.

`--help'
`-h'
     Print a summary of the options to `configure', and exit.

`--version'
`-V'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`--cache-file=FILE'
     Enable the cache: use and save the results of the tests in FILE,
     traditionally `config.cache'.  FILE defaults to `/dev/null' to
     disable caching.

`--config-cache'
`-C'
     Alias for `--cache-file=config.cache'.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`configure' also accepts some other, not widely useful, options.  Run
`configure --help' for more details.

